# -*- coding: utf-8 -*-
"""IQ/Age of First Kiss/Kiss Count

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YtzOwHYmfz4x1yCjImva4ysE4KvgoESh
"""

!pip install --upgrade seaborn patsy --quiet

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Path setting
import os
from google.colab import drive
drive.mount('/content/drive')
os.chdir('/content/drive/My Drive/KISS_COUNT')
os.listdir()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

# 讀取資料
file_path = 'DATA_Kiss_count_gender_and_IQ.xlsx'
df = pd.read_excel(file_path)
df.columns = df.columns.str.strip()

# 選取欄位並清理資料
data = df[['IQ', 'Kiss Count', 'Age of First Kiss']].copy()
data = data.dropna()  # 避免 NaN 影響標準化

# 標準化至 0 到 1
scaler = MinMaxScaler()
data_scaled = pd.DataFrame(scaler.fit_transform(data), columns=data.columns)

# 將每個變數視為一條線，x 軸為樣本編號
plt.figure(figsize=(12, 6))
for col in data_scaled.columns:
    plt.plot(data_scaled.index, data_scaled[col], label=col)

# 美化圖表
plt.title("Standardized (0-1) Values of IQ, Kiss Count, and Age of First Kiss")
plt.xlabel("Sample Index (Person)")
plt.ylabel("Standardized Value (0 to 1)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

# 標準化
data = df[['IQ', 'Kiss Count', 'Age of First Kiss']].dropna()
scaler = MinMaxScaler()
data_scaled = pd.DataFrame(scaler.fit_transform(data), columns=data.columns)

# 長格式轉換 (tidy format)
data_melted = data_scaled.melt(var_name='Variable', value_name='Standardized Value')

# 密度圖
plt.figure(figsize=(10, 6))
sns.kdeplot(data=data_melted, x='Standardized Value', hue='Variable', fill=True, common_norm=False, alpha=0.5)
plt.title("Distribution of Standardized Variables")
plt.xlabel("Standardized Value (0-1)")
plt.ylabel("Density")
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 6))
sns.violinplot(data=data_scaled)
plt.title("Violin Plot of Standardized Variables")
plt.ylabel("Standardized Value (0-1)")
plt.grid(True)
plt.tight_layout()
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from itertools import combinations

# 取得需要欄位並標準化（0-1）
cols = ['IQ', 'Kiss Count', 'Age of First Kiss']
data = df[cols].dropna()
scaler = MinMaxScaler()
data_scaled = pd.DataFrame(scaler.fit_transform(data), columns=cols)

# 所有兩兩組合
pairs = list(combinations(cols, 2))

# 逐對繪圖
for var1, var2 in pairs:
    pair_df = data_scaled[[var1, var2]].copy()

    # 長格式資料
    melted = pair_df.melt(var_name="Variable", value_name="Standardized Value")

    # KDE 密度圖
    plt.figure(figsize=(8, 5))
    sns.kdeplot(data=melted, x="Standardized Value", hue="Variable", fill=True, common_norm=False, alpha=0.5)
    plt.title(f"Density Plot: {var1} vs {var2}")
    plt.xlabel("Standardized Value (0-1)")
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    # Violin plot
    plt.figure(figsize=(6, 5))
    sns.violinplot(data=pair_df)
    plt.title(f"Violin Plot: {var1} vs {var2}")
    plt.ylabel("Standardized Value (0-1)")
    plt.grid(True)
    plt.tight_layout()
    plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# 移除缺失值以防錯誤
plot_data = df[['Kiss Count', 'Age of First Kiss']].dropna()

# 畫散佈圖加回歸線
plt.figure(figsize=(8, 6))
sns.regplot(
    data=plot_data,
    x='Age of First Kiss',
    y='Kiss Count',
    scatter_kws={'alpha': 0.6, 'color': 'orange'},
    line_kws={'color': 'blue'},
)

plt.title('Scatter Plot: Kiss Count vs. Age of First Kiss')
plt.xlabel('Age of First Kiss')
plt.ylabel('Kiss Count')
plt.grid(True)
plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# 取出有這兩欄資料的資料列
plot_data = df[['Kiss Count', 'Age of First Kiss']].dropna()

plt.figure(figsize=(8, 6))
sns.regplot(data=plot_data, x='Age of First Kiss', y='Kiss Count', scatter_kws={'alpha': 0.6}, line_kws={'color': 'red'})
plt.title("Scatter Plot: Age of First Kiss vs. Kiss Count")
plt.xlabel("Age of First Kiss")
plt.ylabel("Kiss Count")
plt.grid(True)
plt.tight_layout()
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# 選擇變數
data = df[['IQ', 'Kiss Count', 'Age of First Kiss']].dropna()

# 定義變數配對
pairs = [
    ('IQ', 'Kiss Count'),
    ('IQ', 'Age of First Kiss'),
    ('Kiss Count', 'Age of First Kiss')
]

# 畫出每一對的散佈圖與回歸線
plt.figure(figsize=(15, 5))
for i, (x, y) in enumerate(pairs):
    plt.subplot(1, 3, i + 1)
    sns.regplot(data=data, x=x, y=y, scatter_kws={'alpha': 0.7}, line_kws={'color': 'red'})
    plt.title(f"{x} vs {y}")
    plt.grid(True)

plt.tight_layout()
plt.show()
